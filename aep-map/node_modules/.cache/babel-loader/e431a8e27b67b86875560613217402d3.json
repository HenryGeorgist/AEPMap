{"ast":null,"code":"import Style from 'ol/style/Style';\nimport Stroke from 'ol/style/Stroke';\nimport Fill from 'ol/style/Fill';\nimport Text from 'ol/style/Text';\nimport v4 from \"uuid\";\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst ML_INITALIZE_START = 'NSI_INITALIZE_START';\nconst ML_INITALIZE_END = 'NSI_INITALIZE_END';\nconst MAP_INITIALIZED = 'MAP_INITIALIZED';\nconst apiHost = process.env.REACT_APP_APIHOST;\n\nconst getBundle = function (config) {\n  return {\n    name: 'ml',\n    getReducer: () => {\n      const initialData = {\n        _shouldInitialize: false,\n        _congfig\n      };\n      return (state = initialData, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case ML_INITALIZE_START:\n          case ML_INITALIZE_END:\n            return Object.assign({}, state, payload);\n\n          case MAP_INITIALIZED:\n            return Object.assign({}, state, {\n              _shouldInitialize: true\n            });\n\n          default:\n            return state;\n        }\n      };\n    },\n    doMlInitialize: () => ({\n      dispatch,\n      store,\n      anonGet\n    }) => {\n      config.registerHook(store);\n      dispatch({\n        type: ML_INITALIZE_START,\n        payload: {\n          _shouldInitialize: false\n        }\n      });\n      initMap(store, config);\n    },\n    reactAepShouldInitialize: state => {\n      if (state.ml._shouldInitialize) return {\n        actionCreator: \"doMlInitialize\"\n      };\n    }\n  };\n};\n\nexport { getBundle as default };\n\nconst initMap = function (store, config) {\n  const map = store.selectMap();\n  const root = store.selectTreeRootNode();\n  let vectorSource = new VectorSource({\n    format: new GeoJSON({\n      featureProjection: \"EPSG:3857\"\n    }),\n    loader: function (extent, resolution, projection) {\n      //let token=\"\";\n      //const pp=store.selectParentProps();\n      //if(store.selectParentProps()){\n      //  token=store.selectParentProps().authToken;\n      //}\n      var url = `${apiHost}/models/boundaries`;\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url);\n      xhr.setRequestHeader(\"Authorization\", `Bearer ${config.token}`); //var onError = function() {\n      //  vectorSource.removeLoadedExtent(extent);\n      //}\n      //xhr.onerror = onError;\n\n      xhr.onload = function () {\n        if (xhr.status == 200) {\n          let format = vectorSource.getFormat();\n          let features = format.readFeatures(xhr.responseText);\n          vectorSource.addFeatures(features);\n        } else {\n          //onError();\n          console.log(\"ERROR LOADING VECTOR SOURCE\");\n        }\n      };\n\n      xhr.send();\n    }\n  });\n  var vectorLayer1 = new VectorLayer({\n    source: vectorSource,\n    style: function (feature) {\n      let s = styles('boundary');\n      s.getText().setText(feature.get('modelName'));\n      return s;\n    }\n  });\n  store.doAddLayer({\n    mapLayer: vectorLayer1,\n    displayName: \"Model Boundaries\",\n    type: \"notfolder\",\n    parentUid: root.uid,\n    visible: true\n  });\n  var featureOverlay = new VectorLayer({\n    source: new VectorSource(),\n    map: map,\n    style: function (feature) {\n      let highlightStyle = styles('highlight'); //highlightStyle.getText().setText(feature.get('name'));\n\n      return highlightStyle;\n    }\n  });\n  let highlight = null;\n  vectorLayer1.getSource().on('change', function (event) {\n    if (vectorLayer1.getSource().getState() === 'ready') {\n      map.on('click', function (evt) {\n        console.log(evt.pixel);\n      });\n      map.on('pointermove', function (evt) {\n        if (evt.dragging) {\n          return;\n        }\n\n        console.log(evt);\n      });\n    }\n  });\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/src/cm3-plugins/ml/cm3-ml-bundle.js"],"names":["Style","Stroke","Fill","Text","v4","VectorLayer","VectorSource","GeoJSON","ML_INITALIZE_START","ML_INITALIZE_END","MAP_INITIALIZED","apiHost","process","env","REACT_APP_APIHOST","getBundle","config","name","getReducer","initialData","_shouldInitialize","_congfig","state","type","payload","Object","assign","doMlInitialize","dispatch","store","anonGet","registerHook","initMap","reactAepShouldInitialize","ml","actionCreator","default","map","selectMap","root","selectTreeRootNode","vectorSource","format","featureProjection","loader","extent","resolution","projection","url","xhr","XMLHttpRequest","open","setRequestHeader","token","onload","status","getFormat","features","readFeatures","responseText","addFeatures","console","log","send","vectorLayer1","source","style","feature","s","styles","getText","setText","get","doAddLayer","mapLayer","displayName","parentUid","uid","visible","featureOverlay","highlightStyle","highlight","getSource","on","event","getState","evt","pixel","dragging"],"mappings":"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","sourcesContent":["import Style from 'ol/style/Style';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Fill from 'ol/style/Fill';\r\nimport Text from 'ol/style/Text';\r\nimport v4 from \"uuid\";\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\n\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst ML_INITALIZE_START='NSI_INITALIZE_START';\r\nconst ML_INITALIZE_END='NSI_INITALIZE_END';\r\nconst MAP_INITIALIZED='MAP_INITIALIZED';\r\n\r\nconst apiHost=process.env.REACT_APP_APIHOST\r\n\r\nconst getBundle=function(config){\r\n  return({\r\n    name:'ml',\r\n    getReducer: () => {\r\n      const initialData = {\r\n        _shouldInitialize: false,\r\n        _congfig\r\n      };\r\n      return (state = initialData, { type, payload }) => {\r\n        switch(type){\r\n          case ML_INITALIZE_START:\r\n          case ML_INITALIZE_END:\r\n            return Object.assign({}, state, payload);\r\n          case MAP_INITIALIZED:\r\n            return Object.assign({}, state, {\r\n              _shouldInitialize: true\r\n            })\r\n          default:\r\n            return state;\r\n        }\r\n      }\r\n    },\r\n    doMlInitialize: () => ({ dispatch, store, anonGet }) => {\r\n      config.registerHook(store)\r\n      dispatch({\r\n        type: ML_INITALIZE_START,\r\n        payload: {\r\n          _shouldInitialize: false,\r\n        }\r\n      })\r\n      initMap(store, config);      \r\n    },\r\n    reactAepShouldInitialize: (state) => {\r\n      if(state.ml._shouldInitialize) return { actionCreator: \"doMlInitialize\" };\r\n    }\r\n  })\r\n}\r\n\r\nexport {getBundle as default}\r\n\r\n\r\nconst initMap=function(store, config){\r\n  const map = store.selectMap();\r\n      const root = store.selectTreeRootNode();\r\n  \r\n      let vectorSource=new VectorSource({\r\n        format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n        loader:function(extent, resolution, projection) {\r\n          //let token=\"\";\r\n          //const pp=store.selectParentProps();\r\n          //if(store.selectParentProps()){\r\n          //  token=store.selectParentProps().authToken;\r\n          //}\r\n          var url = `${apiHost}/models/boundaries`;\r\n          var xhr = new XMLHttpRequest();\r\n          xhr.open('GET', url);\r\n          xhr.setRequestHeader(\"Authorization\", `Bearer ${config.token}`)\r\n          //var onError = function() {\r\n          //  vectorSource.removeLoadedExtent(extent);\r\n          //}\r\n          //xhr.onerror = onError;\r\n          xhr.onload = function() {\r\n            if (xhr.status == 200) {\r\n              let format=vectorSource.getFormat();\r\n              let features = format.readFeatures(xhr.responseText)\r\n              vectorSource.addFeatures(features);\r\n            } else {\r\n              //onError();\r\n              console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n            }\r\n          }\r\n          xhr.send();\r\n        }\r\n      });\r\n\r\n      var vectorLayer1 = new VectorLayer({\r\n          source:vectorSource,\r\n          style:function(feature){\r\n            let s=styles('boundary')\r\n            s.getText().setText(feature.get('modelName'));\r\n            return s;\r\n          } \r\n      });\r\n   \r\n      store.doAddLayer({\r\n          mapLayer:vectorLayer1,\r\n          displayName:\"Model Boundaries\",\r\n          type:\"notfolder\",\r\n          parentUid:root.uid,\r\n          visible:true,\r\n      })\r\n\r\n      var featureOverlay = new VectorLayer({\r\n        source: new VectorSource(),\r\n        map: map,\r\n        style: function(feature) {\r\n          let highlightStyle=styles('highlight')\r\n          //highlightStyle.getText().setText(feature.get('name'));\r\n          return highlightStyle;\r\n        }\r\n      });\r\n\r\n      let highlight=null;\r\n      vectorLayer1.getSource().on('change', function(event) {\r\n        if(vectorLayer1.getSource().getState()==='ready'){\r\n\r\n          map.on('click',function(evt) {\r\n            console.log(evt.pixel)\r\n          })\r\n\r\n          map.on('pointermove', function(evt) {\r\n            if (evt.dragging) {\r\n              return;\r\n            }\r\n            console.log(evt)\r\n          })\r\n        }\r\n      });\r\n}"]},"metadata":{},"sourceType":"module"}