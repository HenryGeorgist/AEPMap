{"ast":null,"code":"import { createSelector } from \"redux-bundler\";\n\nconst getTokenPart = function (token, part) {\n  const splitToken = token.split(\".\");\n  return splitToken[part];\n};\n\nexport default (opts => {\n  const defaults = {\n    url: \"https://corpsmap-dev.sec.usace.army.mil/cwbi/goauth/basic\",\n    token: null,\n    redirectOnLogout: null,\n    verifyInterval: 1000 * 60\n  };\n  const config = Object.assign({}, defaults, opts);\n  if (opts.appId) config.url = `https://corpsmap-dev.sec.usace.army.mil/cwbi/goauth/token/${opts.appId}`;\n  return {\n    name: \"auth\",\n    getReducer: () => {\n      const initialState = {\n        url: config.url,\n        token: config.token,\n        error: null,\n        shouldVerifyToken: true,\n        redirectOnLogout: config.redirectOnLogout\n      };\n      return (state = initialState, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case \"AUTH_LOGGED_IN\":\n          case \"AUTH_LOGGED_OUT\":\n          case \"AUTH_ERROR\":\n          case \"AUTH_VERIFY_TOKEN\":\n            return Object.assign({}, state, payload);\n\n          default:\n            return state;\n        }\n      };\n    },\n    doAuthLogin: () => ({\n      dispatch,\n      store\n    }) => {\n      const url = store.selectAuthUrl();\n      fetch(url, {\n        method: \"GET\"\n      }).then(response => {\n        return response.text();\n      }).then(token => {\n        dispatch({\n          type: \"AUTH_LOGGED_IN\",\n          payload: {\n            token: token,\n            error: null,\n            shouldVerifyToken: true\n          }\n        });\n      }).catch(err => {\n        if (process.env.NODE_ENV === \"development\") console.error(err);\n        dispatch({\n          type: \"AUTH_ERROR\",\n          payload: {\n            msg: \"Error Logging In\",\n            err: err\n          }\n        });\n      });\n    },\n    doAuthLogout: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: \"AUTH_LOGGED_OUT\",\n        payload: {\n          token: null,\n          error: null\n        }\n      });\n      const redirect = store.selectAuthRedirectOnLogout();\n      if (redirect) store.doUpdateUrl(redirect);\n    },\n    doAuthVerifyToken: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: \"AUTH_VERIFY_TOKEN\",\n        payload: {\n          shouldVerifyToken: false\n        }\n      });\n      const isExpired = store.selectAuthTokenIsExpired();\n\n      if (isExpired) {\n        store.doAuthLogout();\n      } else {\n        window.setTimeout(store.doAuthVerifyToken, config.verifyInterval);\n      }\n    },\n    selectAuthRedirectOnLogout: state => {\n      return state.auth.redirectOnLogout;\n    },\n    selectAuthUrl: state => {\n      return state.auth.url;\n    },\n    // select parts of the token itself\n    selectAuthToken: state => {\n      return state.auth.token;\n    },\n    selectAuthTokenHeader: createSelector(\"selectAuthToken\", token => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 0)));\n    }),\n    selectAuthTokenPayload: createSelector(\"selectAuthToken\", token => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 1)));\n    }),\n    // select info about token expiration\n    selectAuthTokenExp: createSelector(\"selectAuthTokenPayload\", payload => {\n      if (!payload.hasOwnProperty(\"exp\")) return null;\n      return payload.exp;\n    }),\n    selectAuthTokenIsExpired: createSelector(\"selectAuthTokenExp\", exp => {\n      if (!exp) return true;\n      return exp < Math.floor(Date.now() / 1000);\n    }),\n    // select parts of the payload\n    selectAuthUsername: createSelector(\"selectAuthTokenPayload\", payload => {\n      if (!payload.hasOwnProperty(\"name\")) return null;\n      return payload.name;\n    }),\n    selectAuthEdipi: createSelector(\"selectAuthTokenPayload\", payload => {\n      if (!payload.hasOwnProperty(\"sub\")) return null;\n      return payload.sub;\n    }),\n    selectAuthRoles: createSelector(\"selectAuthTokenPayload\", payload => {\n      if (!payload.hasOwnProperty(\"roles\")) return [];\n      return payload.roles;\n    }),\n    selectAuthGroups: createSelector(\"selectAuthRoles\", roles => {\n      return roles.map(role => {\n        const roleArr = role.split(\".\");\n        return roleArr[0];\n      });\n    }),\n    selectAuthGroupRoles: createSelector(\"selectAuthRoles\", roles => {\n      const groupRoles = {};\n      roles.map(role => role.split(\".\")).forEach(role => {\n        if (!groupRoles.hasOwnProperty(role[0])) groupRoles[role[0]] = [];\n        groupRoles[role[0]].push(role[1]);\n      });\n      return groupRoles;\n    }),\n    selectAuthIsLoggedIn: state => {\n      return !!state.auth.token;\n    },\n    reactAuthShouldVerifyToken: state => {\n      if (state.auth.shouldVerifyToken) return {\n        actionCreator: \"doAuthVerifyToken\"\n      };\n    },\n    persistActions: [\"AUTH_LOGGED_IN\", \"AUTH_LOGGED_OUT\"]\n  };\n});","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/@corpsmap/create-auth-bundle/index.js"],"names":["createSelector","getTokenPart","token","part","splitToken","split","opts","defaults","url","redirectOnLogout","verifyInterval","config","Object","assign","appId","name","getReducer","initialState","error","shouldVerifyToken","state","type","payload","doAuthLogin","dispatch","store","selectAuthUrl","fetch","method","then","response","text","catch","err","process","env","NODE_ENV","console","msg","doAuthLogout","redirect","selectAuthRedirectOnLogout","doUpdateUrl","doAuthVerifyToken","isExpired","selectAuthTokenIsExpired","window","setTimeout","auth","selectAuthToken","selectAuthTokenHeader","JSON","parse","atob","selectAuthTokenPayload","selectAuthTokenExp","hasOwnProperty","exp","Math","floor","Date","now","selectAuthUsername","selectAuthEdipi","sub","selectAuthRoles","roles","selectAuthGroups","map","role","roleArr","selectAuthGroupRoles","groupRoles","forEach","push","selectAuthIsLoggedIn","reactAuthShouldVerifyToken","actionCreator","persistActions"],"mappings":"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","sourcesContent":["import { createSelector } from \"redux-bundler\";\n\nconst getTokenPart = function (token, part) {\n  const splitToken = token.split(\".\");\n  return splitToken[part];\n};\n\nexport default (opts) => {\n  const defaults = {\n    url: \"https://corpsmap-dev.sec.usace.army.mil/cwbi/goauth/basic\",\n    token: null,\n    redirectOnLogout: null,\n    verifyInterval: 1000 * 60,\n  };\n\n  const config = Object.assign({}, defaults, opts);\n\n  if (opts.appId)\n    config.url = `https://corpsmap-dev.sec.usace.army.mil/cwbi/goauth/token/${opts.appId}`;\n\n  return {\n    name: \"auth\",\n\n    getReducer: () => {\n      const initialState = {\n        url: config.url,\n        token: config.token,\n        error: null,\n        shouldVerifyToken: true,\n        redirectOnLogout: config.redirectOnLogout,\n      };\n\n      return (state = initialState, { type, payload }) => {\n        switch (type) {\n          case \"AUTH_LOGGED_IN\":\n          case \"AUTH_LOGGED_OUT\":\n          case \"AUTH_ERROR\":\n          case \"AUTH_VERIFY_TOKEN\":\n            return Object.assign({}, state, payload);\n          default:\n            return state;\n        }\n      };\n    },\n\n    doAuthLogin: () => ({ dispatch, store }) => {\n      const url = store.selectAuthUrl();\n      fetch(url, {\n        method: \"GET\",\n      })\n        .then((response) => {\n          return response.text();\n        })\n        .then((token) => {\n          dispatch({\n            type: \"AUTH_LOGGED_IN\",\n            payload: { token: token, error: null, shouldVerifyToken: true },\n          });\n        })\n        .catch((err) => {\n          if (process.env.NODE_ENV === \"development\") console.error(err);\n          dispatch({\n            type: \"AUTH_ERROR\",\n            payload: { msg: \"Error Logging In\", err: err },\n          });\n        });\n    },\n\n    doAuthLogout: () => ({ dispatch, store }) => {\n      dispatch({\n        type: \"AUTH_LOGGED_OUT\",\n        payload: { token: null, error: null },\n      });\n      const redirect = store.selectAuthRedirectOnLogout();\n      if (redirect) store.doUpdateUrl(redirect);\n    },\n\n    doAuthVerifyToken: () => ({ dispatch, store }) => {\n      dispatch({\n        type: \"AUTH_VERIFY_TOKEN\",\n        payload: { shouldVerifyToken: false },\n      });\n      const isExpired = store.selectAuthTokenIsExpired();\n      if (isExpired) {\n        store.doAuthLogout();\n      } else {\n        window.setTimeout(store.doAuthVerifyToken, config.verifyInterval);\n      }\n    },\n\n    selectAuthRedirectOnLogout: (state) => {\n      return state.auth.redirectOnLogout;\n    },\n\n    selectAuthUrl: (state) => {\n      return state.auth.url;\n    },\n\n    // select parts of the token itself\n\n    selectAuthToken: (state) => {\n      return state.auth.token;\n    },\n\n    selectAuthTokenHeader: createSelector(\"selectAuthToken\", (token) => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 0)));\n    }),\n\n    selectAuthTokenPayload: createSelector(\"selectAuthToken\", (token) => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 1)));\n    }),\n\n    // select info about token expiration\n\n    selectAuthTokenExp: createSelector(\"selectAuthTokenPayload\", (payload) => {\n      if (!payload.hasOwnProperty(\"exp\")) return null;\n      return payload.exp;\n    }),\n\n    selectAuthTokenIsExpired: createSelector(\"selectAuthTokenExp\", (exp) => {\n      if (!exp) return true;\n      return exp < Math.floor(Date.now() / 1000);\n    }),\n\n    // select parts of the payload\n\n    selectAuthUsername: createSelector(\"selectAuthTokenPayload\", (payload) => {\n      if (!payload.hasOwnProperty(\"name\")) return null;\n      return payload.name;\n    }),\n\n    selectAuthEdipi: createSelector(\"selectAuthTokenPayload\", (payload) => {\n      if (!payload.hasOwnProperty(\"sub\")) return null;\n      return payload.sub;\n    }),\n\n    selectAuthRoles: createSelector(\"selectAuthTokenPayload\", (payload) => {\n      if (!payload.hasOwnProperty(\"roles\")) return [];\n      return payload.roles;\n    }),\n\n    selectAuthGroups: createSelector(\"selectAuthRoles\", (roles) => {\n      return roles.map((role) => {\n        const roleArr = role.split(\".\");\n        return roleArr[0];\n      });\n    }),\n\n    selectAuthGroupRoles: createSelector(\"selectAuthRoles\", (roles) => {\n      const groupRoles = {};\n      roles\n        .map((role) => role.split(\".\"))\n        .forEach((role) => {\n          if (!groupRoles.hasOwnProperty(role[0])) groupRoles[role[0]] = [];\n          groupRoles[role[0]].push(role[1]);\n        });\n      return groupRoles;\n    }),\n\n    selectAuthIsLoggedIn: (state) => {\n      return !!state.auth.token;\n    },\n\n    reactAuthShouldVerifyToken: (state) => {\n      if (state.auth.shouldVerifyToken)\n        return { actionCreator: \"doAuthVerifyToken\" };\n    },\n\n    persistActions: [\"AUTH_LOGGED_IN\", \"AUTH_LOGGED_OUT\"],\n  };\n};\n"]},"metadata":{},"sourceType":"module"}