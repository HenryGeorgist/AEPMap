{"ast":null,"code":"import Collection from \"ol/Collection\";\nimport Style from \"ol/style/Style\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\nimport Circle from \"ol/style/Circle\";\nimport XYZ from \"ol/source/XYZ\";\nimport TileArcGISRest from \"ol/source/TileArcGISRest\";\nimport ImageArcGISRest from \"ol/source/ImageArcGISRest\";\nimport ImageWMS from \"ol/source/ImageWMS\";\nimport TileWMS from \"ol/source/TileWMS\";\nimport VectorSrc from \"ol/source/Vector\";\nimport Tile from \"ol/layer/Tile\";\nimport Image from \"ol/layer/Image\";\nimport Vector from \"ol/layer/Vector\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport vectorStyleCreator from \"./vector-style\";\nimport xhr from \"xhr\";\nimport EsriJSON from \"ol/format/EsriJSON.js\";\nimport { tile, bbox } from \"ol/loadingstrategy\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { createXYZ } from \"ol/tilegrid\";\nimport async from \"async\";\nimport { createStyleFunctionFromUrl, setMapProjection } from \"ol-esri-style\";\nconst esrijsonFormat = new EsriJSON();\nconst origin = window.location.origin;\n\nconst isCrossOrigin = url => {\n  if (!!window.MSInputMethodContext && !!document.documentMode) return null;\n\n  if (url) {\n    if (url.indexOf(origin) === -1) return \"anonymous\";\n  } else {\n    return null;\n  }\n}; // const defaultVectorStyle = new Style({\n//   fill: new Fill({\n//     color: 'rgba(255, 255, 255, 0.2)'\n//   }),\n//   stroke: new Stroke({\n//     color: 'rgba(0, 0, 0, 0.5)',\n//     lineDash: [10, 10],\n//     width: 2\n//   }),\n//   image: new Circle({\n//     radius: 3,\n//     stroke: new Stroke({\n//       color: 'rgba(0, 0, 0, 0.7)'\n//     }),\n//     fill: new Fill({\n//       color: 'rgba(255, 255, 255, 0.2)'\n//     })\n//   })\n// });\n\n\nfunction formatLabeledUrl(url) {\n  const delim = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  return `${url}${delim}label=true`;\n}\n\nfunction getXyzSource(options) {\n  const labelsOn = !!options.labelDefault;\n  const url = labelsOn ? formatLabeledUrl(options.url) : options.url;\n  return new XYZ({\n    attributions: options.attributions || options.attribution,\n    attributionsCollapsible: true,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n    url: url,\n    crossOrigin: isCrossOrigin(options.url)\n  });\n}\n\nfunction getArcGISTiledSource(options) {\n  return new TileArcGISRest({\n    url: options.url,\n    params: {\n      LAYERS: \"show:\" + options.layerList\n    },\n    crossOrigin: isCrossOrigin(options.url)\n  });\n}\n\nfunction getArcGISImageSource(options) {\n  return new ImageArcGISRest({\n    url: options.url,\n    params: {\n      LAYERS: \"show:\" + options.layerList\n    },\n    crossOrigin: isCrossOrigin(options.url)\n  });\n}\n\nfunction getWmsSource(options) {\n  const params = options.params || options;\n  params.LAYERS = options.layerList || options.LAYERS;\n\n  if (options.tiled === true) {\n    return new TileWMS({\n      url: options.url,\n      params: params,\n      crossOrigin: isCrossOrigin(options.url)\n    });\n  }\n\n  return new ImageWMS({\n    url: options.url,\n    params: params,\n    crossOrigin: isCrossOrigin(options.url)\n  });\n}\n\nfunction getLocalVectorSource(options) {\n  const src = new VectorSrc();\n  const {\n    features\n  } = options;\n  if (features) src.addFeatures(features);\n  return src;\n}\n\nfunction getRemoteVectorSource(options) {\n  const src = new VectorSrc({\n    format: new GeoJSON(),\n    url: options.url\n  }); // @TODO figure out how to re-enable adding features to the identify tool\n  // src.on('addfeature', (e) => {\n  //   const uid = options.uid;\n  //   const g = new GeoJSON();\n  //   const geojson = g.writeFeatureObject(e.feature, { featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4326' });\n  //   window.store.doGeojsonIdentAddFeatures(uid, geojson);\n  // })\n\n  return src;\n}\n\nfunction getEsriVectorSource(options) {\n  let serviceUrl = options.url;\n  const layer = options.layerList;\n  const trailingSlashMatch = /\\/$/;\n  if (!trailingSlashMatch.test(serviceUrl)) serviceUrl += \"/\";\n  const src = new VectorSrc({\n    loader: function (extent, resolution, projection) {\n      const g = encodeURIComponent(`{\"xmin\":${extent[0]},\"ymin\":${extent[1]},\"xmax\":${extent[2]},\"ymax\":${extent[3]},\"spatialReference\":{\"wkid\":102100}}`);\n      const url = `${serviceUrl}${layer}/query/?f=json&returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=${g}&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*&outSR=102100`;\n      xhr.get(url, (err, response, body) => {\n        if (err) return console.log(err);\n        const data = JSON.parse(body);\n        const features = esrijsonFormat.readFeatures(data, {\n          featureProjection: projection\n        });\n\n        if (features.length > 0) {\n          src.addFeatures(features);\n        }\n      });\n    },\n    strategy: tile(createXYZ({\n      tileSize: 512\n    }))\n  });\n  return src;\n}\n\nfunction getTileLayer(options, source) {\n  return new Tile({\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom\n  });\n}\n\nfunction getImageLayer(options, source) {\n  return new Image({\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom\n  });\n}\n\nfunction getLocalVectorLayer(options, source) {\n  return new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    style: vectorStyleCreator(options),\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom\n  });\n}\n\nfunction getRemoteVectorLayer(options, source) {\n  const lyr = new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    style: vectorStyleCreator(options),\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    renderMode: \"image\",\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom\n  });\n  const uid = options.uid; // window.store.doGeojsonIdentAddFeatures(uid, null, lyr);\n\n  return lyr;\n}\n\nfunction getEsriVectorLayer(options, source, map) {\n  setMapProjection(map.getView().getProjection());\n  const lyr = new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    renderMode: \"image\",\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom\n  });\n  createStyleFunctionFromUrl(`${options.url}/${options.layerList}`).then(styleFunction => {\n    lyr.setStyle(styleFunction);\n  });\n  return lyr;\n}\n\nfunction getSource(options) {\n  switch (options.serviceType) {\n    case \"XYZ\":\n      return getXyzSource(options);\n\n    case \"ArcGIS\":\n      return getArcGISTiledSource(options);\n\n    case \"ArcGISImage\":\n      return getArcGISImageSource(options);\n\n    case \"WMS\":\n      return getWmsSource(options);\n\n    case \"LocalVector\":\n      return getLocalVectorSource(options);\n\n    case \"RemoteVector\":\n      return getRemoteVectorSource(options);\n\n    case \"EsriFeatureService\":\n      return getEsriVectorSource(options);\n\n    default:\n      return null;\n  }\n}\n\nfunction getLayer(options, source, map) {\n  if (!source) source = getSource(options);\n\n  switch (options.serviceType) {\n    case \"XYZ\":\n      return getTileLayer(options, source);\n\n    case \"ArcGIS\":\n      return getTileLayer(options, source);\n\n    case \"ArcGISImage\":\n      return getImageLayer(options, source);\n\n    case \"WMS\":\n      return getImageLayer(options, source);\n\n    case \"LocalVector\":\n      return getLocalVectorLayer(options, source);\n\n    case \"RemoteVector\":\n      return getRemoteVectorLayer(options, source);\n\n    case \"EsriFeatureService\":\n      return getEsriVectorLayer(options, source, map);\n\n    default:\n      return null;\n  }\n}\n\nexport { getSource, getLayer };","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/@corpsmap/corpsmap/src/openlayers-utils/layer-utilities.js"],"names":["Collection","Style","Fill","Stroke","Circle","XYZ","TileArcGISRest","ImageArcGISRest","ImageWMS","TileWMS","VectorSrc","Tile","Image","Vector","GeoJSON","vectorStyleCreator","xhr","EsriJSON","tile","bbox","TileGrid","createXYZ","async","createStyleFunctionFromUrl","setMapProjection","esrijsonFormat","origin","window","location","isCrossOrigin","url","MSInputMethodContext","document","documentMode","indexOf","formatLabeledUrl","delim","getXyzSource","options","labelsOn","labelDefault","attributions","attribution","attributionsCollapsible","maxZoom","maxzoom","minZoom","minzoom","crossOrigin","getArcGISTiledSource","params","LAYERS","layerList","getArcGISImageSource","getWmsSource","tiled","getLocalVectorSource","src","features","addFeatures","getRemoteVectorSource","format","getEsriVectorSource","serviceUrl","layer","trailingSlashMatch","test","loader","extent","resolution","projection","g","encodeURIComponent","get","err","response","body","console","log","data","JSON","parse","readFeatures","featureProjection","length","strategy","tileSize","getTileLayer","source","visible","zIndex","opacity","getImageLayer","getLocalVectorLayer","altitudeMode","style","getRemoteVectorLayer","lyr","renderMode","uid","getEsriVectorLayer","map","getView","getProjection","then","styleFunction","setStyle","getSource","serviceType","getLayer"],"mappings":"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","sourcesContent":["import Collection from \"ol/Collection\";\nimport Style from \"ol/style/Style\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\nimport Circle from \"ol/style/Circle\";\nimport XYZ from \"ol/source/XYZ\";\nimport TileArcGISRest from \"ol/source/TileArcGISRest\";\nimport ImageArcGISRest from \"ol/source/ImageArcGISRest\";\nimport ImageWMS from \"ol/source/ImageWMS\";\nimport TileWMS from \"ol/source/TileWMS\";\nimport VectorSrc from \"ol/source/Vector\";\nimport Tile from \"ol/layer/Tile\";\nimport Image from \"ol/layer/Image\";\nimport Vector from \"ol/layer/Vector\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport vectorStyleCreator from \"./vector-style\";\nimport xhr from \"xhr\";\nimport EsriJSON from \"ol/format/EsriJSON.js\";\nimport { tile, bbox } from \"ol/loadingstrategy\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport { createXYZ } from \"ol/tilegrid\";\nimport async from \"async\";\nimport { createStyleFunctionFromUrl, setMapProjection } from \"ol-esri-style\";\n\nconst esrijsonFormat = new EsriJSON();\n\nconst origin = window.location.origin;\n\nconst isCrossOrigin = (url) => {\n  if (!!window.MSInputMethodContext && !!document.documentMode) return null;\n  if (url) {\n    if (url.indexOf(origin) === -1) return \"anonymous\";\n  } else {\n    return null;\n  }\n};\n\n// const defaultVectorStyle = new Style({\n//   fill: new Fill({\n//     color: 'rgba(255, 255, 255, 0.2)'\n//   }),\n//   stroke: new Stroke({\n//     color: 'rgba(0, 0, 0, 0.5)',\n//     lineDash: [10, 10],\n//     width: 2\n//   }),\n//   image: new Circle({\n//     radius: 3,\n//     stroke: new Stroke({\n//       color: 'rgba(0, 0, 0, 0.7)'\n//     }),\n//     fill: new Fill({\n//       color: 'rgba(255, 255, 255, 0.2)'\n//     })\n//   })\n// });\n\nfunction formatLabeledUrl(url) {\n  const delim = url.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n  return `${url}${delim}label=true`;\n}\n\nfunction getXyzSource(options) {\n  const labelsOn = !!options.labelDefault;\n  const url = labelsOn ? formatLabeledUrl(options.url) : options.url;\n  return new XYZ({\n    attributions: options.attributions || options.attribution,\n    attributionsCollapsible: true,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n    url: url,\n    crossOrigin: isCrossOrigin(options.url),\n  });\n}\n\nfunction getArcGISTiledSource(options) {\n  return new TileArcGISRest({\n    url: options.url,\n    params: {\n      LAYERS: \"show:\" + options.layerList,\n    },\n    crossOrigin: isCrossOrigin(options.url),\n  });\n}\n\nfunction getArcGISImageSource(options) {\n  return new ImageArcGISRest({\n    url: options.url,\n    params: {\n      LAYERS: \"show:\" + options.layerList,\n    },\n    crossOrigin: isCrossOrigin(options.url),\n  });\n}\n\nfunction getWmsSource(options) {\n  const params = options.params || options;\n  params.LAYERS = options.layerList || options.LAYERS;\n  if (options.tiled === true) {\n    return new TileWMS({\n      url: options.url,\n      params: params,\n      crossOrigin: isCrossOrigin(options.url),\n    });\n  }\n  return new ImageWMS({\n    url: options.url,\n    params: params,\n    crossOrigin: isCrossOrigin(options.url),\n  });\n}\n\nfunction getLocalVectorSource(options) {\n  const src = new VectorSrc();\n  const { features } = options;\n  if (features) src.addFeatures(features);\n  return src;\n}\n\nfunction getRemoteVectorSource(options) {\n  const src = new VectorSrc({\n    format: new GeoJSON(),\n    url: options.url,\n  });\n  // @TODO figure out how to re-enable adding features to the identify tool\n  // src.on('addfeature', (e) => {\n  //   const uid = options.uid;\n  //   const g = new GeoJSON();\n  //   const geojson = g.writeFeatureObject(e.feature, { featureProjection: 'EPSG:3857', dataProjection: 'EPSG:4326' });\n  //   window.store.doGeojsonIdentAddFeatures(uid, geojson);\n  // })\n  return src;\n}\n\nfunction getEsriVectorSource(options) {\n  let serviceUrl = options.url;\n  const layer = options.layerList;\n  const trailingSlashMatch = /\\/$/;\n\n  if (!trailingSlashMatch.test(serviceUrl)) serviceUrl += \"/\";\n\n  const src = new VectorSrc({\n    loader: function (extent, resolution, projection) {\n      const g = encodeURIComponent(\n        `{\"xmin\":${extent[0]},\"ymin\":${extent[1]},\"xmax\":${extent[2]},\"ymax\":${extent[3]},\"spatialReference\":{\"wkid\":102100}}`\n      );\n      const url = `${serviceUrl}${layer}/query/?f=json&returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=${g}&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*&outSR=102100`;\n      xhr.get(url, (err, response, body) => {\n        if (err) return console.log(err);\n        const data = JSON.parse(body);\n        const features = esrijsonFormat.readFeatures(data, {\n          featureProjection: projection,\n        });\n        if (features.length > 0) {\n          src.addFeatures(features);\n        }\n      });\n    },\n    strategy: tile(\n      createXYZ({\n        tileSize: 512,\n      })\n    ),\n  });\n  return src;\n}\n\nfunction getTileLayer(options, source) {\n  return new Tile({\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n  });\n}\n\nfunction getImageLayer(options, source) {\n  return new Image({\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n  });\n}\n\nfunction getLocalVectorLayer(options, source) {\n  return new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    style: vectorStyleCreator(options),\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n  });\n}\n\nfunction getRemoteVectorLayer(options, source) {\n  const lyr = new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    style: vectorStyleCreator(options),\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    renderMode: \"image\",\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n  });\n  const uid = options.uid;\n  // window.store.doGeojsonIdentAddFeatures(uid, null, lyr);\n  return lyr;\n}\n\nfunction getEsriVectorLayer(options, source, map) {\n  setMapProjection(map.getView().getProjection());\n  const lyr = new Vector({\n    altitudeMode: \"clampToGround\",\n    source: source,\n    visible: options.visible,\n    zIndex: options.zIndex || 0,\n    opacity: options.opacity || 1,\n    renderMode: \"image\",\n    maxZoom: options.maxzoom,\n    minZoom: options.minzoom,\n  });\n  createStyleFunctionFromUrl(`${options.url}/${options.layerList}`).then(\n    (styleFunction) => {\n      lyr.setStyle(styleFunction);\n    }\n  );\n  return lyr;\n}\n\nfunction getSource(options) {\n  switch (options.serviceType) {\n    case \"XYZ\":\n      return getXyzSource(options);\n    case \"ArcGIS\":\n      return getArcGISTiledSource(options);\n    case \"ArcGISImage\":\n      return getArcGISImageSource(options);\n    case \"WMS\":\n      return getWmsSource(options);\n    case \"LocalVector\":\n      return getLocalVectorSource(options);\n    case \"RemoteVector\":\n      return getRemoteVectorSource(options);\n    case \"EsriFeatureService\":\n      return getEsriVectorSource(options);\n    default:\n      return null;\n  }\n}\n\nfunction getLayer(options, source, map) {\n  if (!source) source = getSource(options);\n  switch (options.serviceType) {\n    case \"XYZ\":\n      return getTileLayer(options, source);\n    case \"ArcGIS\":\n      return getTileLayer(options, source);\n    case \"ArcGISImage\":\n      return getImageLayer(options, source);\n    case \"WMS\":\n      return getImageLayer(options, source);\n    case \"LocalVector\":\n      return getLocalVectorLayer(options, source);\n    case \"RemoteVector\":\n      return getRemoteVectorLayer(options, source);\n    case \"EsriFeatureService\":\n      return getEsriVectorLayer(options, source, map);\n    default:\n      return null;\n  }\n}\n\nexport { getSource, getLayer };\n"]},"metadata":{},"sourceType":"module"}