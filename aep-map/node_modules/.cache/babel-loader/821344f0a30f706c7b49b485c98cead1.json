{"ast":null,"code":"import xhr from 'xhr';\nimport { createSelector } from 'redux-bundler';\n\nconst getTokenPart = function (token, part) {\n  const splitToken = token.split('.');\n  return splitToken[part];\n};\n\nexport default {\n  name: 'auth',\n\n  getReducer() {\n    const initialData = {\n      shouldCheckExpired: true,\n      token: '',\n      err: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'AUTH_LOGGED_IN':\n        case 'AUTH_LOGGED_ERROR':\n        case 'AUTH_CHECK_EXPIRED':\n          return Object.assign({}, state, payload);\n\n        case 'AUTH_LOGGED_OUT':\n          return Object.assign({}, state, {\n            token: '',\n            err: null\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n\n  doLogin: () => ({\n    dispatch,\n    store\n  }) => {\n    const root = store.selectApiRoot();\n    store.doSetCursor('wait');\n    let notification;\n    dispatch({\n      type: 'AUTH_LOGGING_IN'\n    });\n    xhr.get({\n      url: `${root}/auth/login`\n    }, (err, res, body) => {\n      store.doSetCursor();\n\n      if (res.statusCode === 404) {\n        notification = {\n          title: \"Error Logging In\",\n          message: `It looks like you don't have a CorpsMap account, click the button below to open the CorpsMap home page and create an account.`,\n          level: \"info\",\n          position: \"tr\",\n          autoDismiss: 0,\n          action: {\n            label: \"Create Account\",\n            callback: function () {\n              window.open(`${root}/corpsmap/home`, \"_blank\");\n            }\n          }\n        };\n        dispatch({\n          type: 'AUTH_USER_DOES_NOT_EXIST',\n          payload: {\n            notification: notification\n          }\n        });\n      } else if (res.statusCode === 200) {\n        notification = {\n          title: 'Authentication Notificiation',\n          message: 'Successfully Logged In',\n          level: 'success'\n        };\n        dispatch({\n          type: 'AUTH_LOGGED_IN',\n          payload: {\n            token: JSON.parse(body),\n            notification: notification\n          }\n        });\n      } else {\n        notification = {\n          title: 'Authentication Notificiation',\n          message: 'Error Logging In',\n          level: 'error'\n        };\n        dispatch({\n          type: 'AUTH_LOGIN_ERROR',\n          payload: {\n            err: err,\n            notification: notification\n          }\n        });\n      }\n    });\n  },\n  doLogout: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'AUTH_LOGGED_OUT'\n    });\n  },\n  doAuthCheckExpired: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'AUTH_CHECK_EXPIRED',\n      payload: {\n        shouldCheckExpired: false\n      }\n    });\n    const isExpired = store.selectIsTokenExpired();\n    if (isExpired) store.doLogout();\n  },\n  selectIsLoggedIn: state => {\n    return !!state.auth.token;\n  },\n  selectTokenRaw: state => {\n    return state.auth.token;\n  },\n  selectIsTokenExpired: createSelector('selectIsLoggedIn', 'selectTokenPayload', (isLoggedIn, payload) => {\n    if (!isLoggedIn) return false;\n    return payload.exp < Math.floor(Date.now() / 1000);\n  }),\n  selectTokenHeader: createSelector('selectTokenRaw', token => {\n    if (!token) return {};\n    return JSON.parse(window.atob(getTokenPart(token, 0)));\n  }),\n  selectTokenPayload: createSelector('selectTokenRaw', token => {\n    if (!token) return {};\n    return JSON.parse(window.atob(getTokenPart(token, 1)));\n  }),\n  reactAuthShouldCheckExpired: state => {\n    if (state.auth.shouldCheckExpired) return {\n      actionCreator: 'doAuthCheckExpired'\n    };\n  },\n  persistActions: ['AUTH_LOGGED_IN', 'AUTH_LOGGED_OUT']\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/@corpsmap/corpsmap/src/application-bundles-old/auth-bundle.js"],"names":["xhr","createSelector","getTokenPart","token","part","splitToken","split","name","getReducer","initialData","shouldCheckExpired","err","state","type","payload","Object","assign","doLogin","dispatch","store","root","selectApiRoot","doSetCursor","notification","get","url","res","body","statusCode","title","message","level","position","autoDismiss","action","label","callback","window","open","JSON","parse","doLogout","doAuthCheckExpired","isExpired","selectIsTokenExpired","selectIsLoggedIn","auth","selectTokenRaw","isLoggedIn","exp","Math","floor","Date","now","selectTokenHeader","atob","selectTokenPayload","reactAuthShouldCheckExpired","actionCreator","persistActions"],"mappings":"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","sourcesContent":["import xhr from 'xhr';\nimport { createSelector } from 'redux-bundler';\n\nconst getTokenPart = function(token, part){\n  const splitToken = token.split('.');\n  return splitToken[part];\n}\n\nexport default {\n  name: 'auth',\n\n  getReducer(){\n    const initialData = {\n      shouldCheckExpired: true,\n      token: '',\n      err: null\n    }\n\n    return (state = initialData, {type, payload}) => {\n\n      switch(type){\n        case 'AUTH_LOGGED_IN':\n        case 'AUTH_LOGGED_ERROR':\n        case 'AUTH_CHECK_EXPIRED':\n          return Object.assign({}, state, payload);\n        case 'AUTH_LOGGED_OUT':\n          return Object.assign({}, state, {\n            token: '',\n            err: null\n          });\n        default: \n          return state;\n      }\n    }\n  },\n\n  doLogin: () => ({dispatch, store}) => {\n    const root = store.selectApiRoot();\n    store.doSetCursor('wait');\n    let notification;\n    dispatch({type:'AUTH_LOGGING_IN'});\n    xhr.get({\n      url: `${root}/auth/login`\n    }, (err, res, body) => {\n      store.doSetCursor();\n      if(res.statusCode === 404){\n        notification = {\n          title: \"Error Logging In\",\n          message: `It looks like you don't have a CorpsMap account, click the button below to open the CorpsMap home page and create an account.`,\n          level: \"info\",\n          position: \"tr\",\n          autoDismiss: 0,\n          action: {\n            label: \"Create Account\",\n            callback: function() {\n              window.open(\n                `${root}/corpsmap/home`,\n                \"_blank\"\n              );\n            }\n          }\n        }\n        dispatch({type:'AUTH_USER_DOES_NOT_EXIST', payload: { notification: notification }})\n      }else if(res.statusCode === 200){\n        notification = {\n          title: 'Authentication Notificiation',\n          message: 'Successfully Logged In',\n          level: 'success'\n        }\n        dispatch({type:'AUTH_LOGGED_IN', payload: { token: JSON.parse(body), notification: notification }});\n      }else{\n        notification = {\n          title: 'Authentication Notificiation',\n          message: 'Error Logging In',\n          level: 'error'\n        }\n        dispatch({type:'AUTH_LOGIN_ERROR', payload: { err: err , notification: notification }})\n      }\n    })\n  },\n\n  doLogout: () => ({dispatch, store}) => {\n    dispatch({type:'AUTH_LOGGED_OUT'});\n  },\n\n  doAuthCheckExpired: () => ({ dispatch, store }) => {\n    dispatch({ type: 'AUTH_CHECK_EXPIRED', payload: { shouldCheckExpired: false }});\n    const isExpired = store.selectIsTokenExpired();\n    if(isExpired) store.doLogout();\n  },\n\n  selectIsLoggedIn: (state) => {\n    return !!state.auth.token;\n  },\n\n  selectTokenRaw: (state) => {\n    return state.auth.token;\n  },\n\n  selectIsTokenExpired: createSelector(\n    'selectIsLoggedIn',\n    'selectTokenPayload',\n    (isLoggedIn, payload) => {\n      if(!isLoggedIn) return false;\n      return payload.exp < Math.floor(Date.now()/1000);\n    }\n  ),\n\n  selectTokenHeader: createSelector(\n    'selectTokenRaw',\n    (token) => {\n      if(!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 0)));\n    }\n  ),\n\n  selectTokenPayload: createSelector(\n    'selectTokenRaw',\n    (token) => {\n      if(!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 1)));\n    }\n  ),\n\n  reactAuthShouldCheckExpired: (state) => {\n    if(state.auth.shouldCheckExpired) return { actionCreator: 'doAuthCheckExpired' };\n  }, \n\n  persistActions: ['AUTH_LOGGED_IN', 'AUTH_LOGGED_OUT']\n}"]},"metadata":{},"sourceType":"module"}