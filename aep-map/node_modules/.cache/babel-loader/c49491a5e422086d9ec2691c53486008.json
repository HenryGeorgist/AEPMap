{"ast":null,"code":"import v4 from \"uuid\";\nimport Static from 'ol/source/ImageStatic';\nimport ImageLayer from 'ol/layer/Image';\nimport Projection from 'ol/proj/Projection';\nimport exampleTiff from '../../resources/Depth (Max).Terrain.stpaul_10ft.tif';\nconst AEP_INITALIZE_START = 'AEP_INITALIZE_START';\nconst AEP_INITALIZE_END = 'AEP_INITALIZE_END';\nconst MAP_INITIALIZED = 'MAP_INITIALIZED';\nconst apiHost = process.env.REACT_APP_APIHOST_AEP;\n\nconst getBundle = function () {\n  return {\n    name: 'aep',\n    getReducer: () => {\n      const initialData = {\n        _shouldInitialize: false\n      };\n      return (state = initialData, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case AEP_INITALIZE_START:\n          case AEP_INITALIZE_END:\n            return Object.assign({}, state, payload);\n\n          case MAP_INITIALIZED:\n            return Object.assign({}, state, {\n              _shouldInitialize: true\n            });\n\n          default:\n            return state;\n        }\n      };\n    },\n    doAepInitialize: () => ({\n      dispatch,\n      store,\n      anonGet\n    }) => {\n      dispatch({\n        type: AEP_INITALIZE_START,\n        payload: {\n          _shouldInitialize: false\n        }\n      });\n      initMap(store);\n    },\n    reactAepShouldInitialize: state => {\n      if (state.aep._shouldInitialize) return {\n        actionCreator: \"doAepInitialize\"\n      };\n    }\n  };\n};\n\nexport { getBundle as default };\n\nconst initMap = function (store) {\n  /* const map = store.selectMap();\r\n       const root = store.selectTreeRootNode();\r\n       let vectorSource=new VectorSource({\r\n         format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n         loader:function(extent, resolution, projection) {\r\n           var url = `${apiHost}/models/boundaries`;\r\n           var xhr = new XMLHttpRequest();\r\n           xhr.open('GET', url);\r\n           xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`)\r\n           //var onError = function() {\r\n           //  vectorSource.removeLoadedExtent(extent);\r\n           //}\r\n           //xhr.onerror = onError;\r\n           xhr.onload = function() {\r\n             if (xhr.status == 200) {\r\n               let format=vectorSource.getFormat();\r\n               let features = format.readFeatures(xhr.responseText)\r\n               vectorSource.addFeatures(features);\r\n             } else {\r\n               //onError();\r\n               console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n             }\r\n           }\r\n           xhr.send();\r\n         }\r\n       });\r\n  \n       var vectorLayer1 = new VectorLayer({\r\n           source:vectorSource,\r\n           style:function(feature){\r\n             let s = new Style({\r\n               stroke: new Stroke({\r\n                 color: '#CCC',\r\n                 width: 3.0\r\n               }),\r\n               fill:new Fill({\r\n                 color: 'rgba(0,0,255,0.0)'\r\n               }),\r\n               text: new Text({\r\n                 font: '11px \"Open Sans\", \"Arial Unicode MS\", \"sans-serif\"',\r\n                 //placement: 'line',\r\n                 overflow:false,\r\n                 stroke: new Stroke({color:\"#FFF\", width:2}),\r\n                 fill: new Fill({\r\n                   color: 'black'\r\n                 })\r\n               })\r\n             })\r\n             s.getText().setText(feature.get('modelName'));\r\n             return s;\r\n           } \r\n       });\r\n  */\n  let lyr = null;\n  const parentUid = store.selectTreeViewRootId();\n  const uid = v4();\n  store.doAddLayer({\n    uid: uid,\n    displayName: 'AEP Grids',\n    parentUid: parentUid,\n    mapLayer: lyr,\n    serviceType: \"LocalGeoTif\",\n    visible: true,\n    zoomTo: false\n  });\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/src/cm3-plugins/aep/cm3-aep-bundle.js"],"names":["v4","Static","ImageLayer","Projection","exampleTiff","AEP_INITALIZE_START","AEP_INITALIZE_END","MAP_INITIALIZED","apiHost","process","env","REACT_APP_APIHOST_AEP","getBundle","name","getReducer","initialData","_shouldInitialize","state","type","payload","Object","assign","doAepInitialize","dispatch","store","anonGet","initMap","reactAepShouldInitialize","aep","actionCreator","default","lyr","parentUid","selectTreeViewRootId","uid","doAddLayer","displayName","mapLayer","serviceType","visible","zoomTo"],"mappings":"AAAA,OAAOA,EAAP,MAAe,MAAf;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,WAAP,MAAwB,qDAAxB;AACA,MAAMC,mBAAmB,GAAC,qBAA1B;AACA,MAAMC,iBAAiB,GAAC,mBAAxB;AACA,MAAMC,eAAe,GAAC,iBAAtB;AACA,MAAMC,OAAO,GAACC,OAAO,CAACC,GAAR,CAAYC,qBAA1B;;AAEA,MAAMC,SAAS,GAAC,YAAU;AACxB,SAAO;AACLC,IAAAA,IAAI,EAAC,KADA;AAELC,IAAAA,UAAU,EAAE,MAAM;AAChB,YAAMC,WAAW,GAAG;AAClBC,QAAAA,iBAAiB,EAAE;AADD,OAApB;AAGA,aAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAtB,KAA4C;AACjD,gBAAOD,IAAP;AACE,eAAKb,mBAAL;AACA,eAAKC,iBAAL;AACE,mBAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACF,eAAKZ,eAAL;AACE,mBAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BD,cAAAA,iBAAiB,EAAE;AADW,aAAzB,CAAP;;AAGF;AACE,mBAAOC,KAAP;AATJ;AAWD,OAZD;AAaD,KAnBI;AAoBLK,IAAAA,eAAe,EAAE,MAAM,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAD,KAAkC;AACvDF,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEb,mBADC;AAEPc,QAAAA,OAAO,EAAE;AACPH,UAAAA,iBAAiB,EAAE;AADZ;AAFF,OAAD,CAAR;AAMAU,MAAAA,OAAO,CAACF,KAAD,CAAP;AACD,KA5BI;AA6BLG,IAAAA,wBAAwB,EAAGV,KAAD,IAAW;AACnC,UAAGA,KAAK,CAACW,GAAN,CAAUZ,iBAAb,EAAgC,OAAO;AAAEa,QAAAA,aAAa,EAAE;AAAjB,OAAP;AACjC;AA/BI,GAAP;AAiCD,CAlCD;;AAoCA,SAAQjB,SAAS,IAAIkB,OAArB;;AAGA,MAAMJ,OAAO,GAAC,UAASF,KAAT,EAAe;AAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDD,MAAIO,GAAG,GAAG,IAAV;AACE,QAAMC,SAAS,GAAGR,KAAK,CAACS,oBAAN,EAAlB;AACA,QAAMC,GAAG,GAAGlC,EAAE,EAAd;AACAwB,EAAAA,KAAK,CAACW,UAAN,CAAiB;AACfD,IAAAA,GAAG,EAAEA,GADU;AAEfE,IAAAA,WAAW,EAAE,WAFE;AAGfJ,IAAAA,SAAS,EAAEA,SAHI;AAIfK,IAAAA,QAAQ,EAAEN,GAJK;AAKfO,IAAAA,WAAW,EAAE,aALE;AAMfC,IAAAA,OAAO,EAAE,IANM;AAOfC,IAAAA,MAAM,EAAE;AAPO,GAAjB;AASD,CAlED","sourcesContent":["import v4 from \"uuid\";\r\nimport Static from 'ol/source/ImageStatic';\r\nimport ImageLayer from 'ol/layer/Image';\r\nimport Projection from 'ol/proj/Projection';\r\nimport exampleTiff from '../../resources/Depth (Max).Terrain.stpaul_10ft.tif'\r\nconst AEP_INITALIZE_START='AEP_INITALIZE_START';\r\nconst AEP_INITALIZE_END='AEP_INITALIZE_END';\r\nconst MAP_INITIALIZED='MAP_INITIALIZED';\r\nconst apiHost=process.env.REACT_APP_APIHOST_AEP\r\n\r\nconst getBundle=function(){\r\n  return({\r\n    name:'aep',\r\n    getReducer: () => {\r\n      const initialData = {\r\n        _shouldInitialize: false,\r\n      };\r\n      return (state = initialData, { type, payload }) => {\r\n        switch(type){\r\n          case AEP_INITALIZE_START:\r\n          case AEP_INITALIZE_END:\r\n            return Object.assign({}, state, payload);\r\n          case MAP_INITIALIZED:\r\n            return Object.assign({}, state, {\r\n              _shouldInitialize: true\r\n            })\r\n          default:\r\n            return state;\r\n        }\r\n      }\r\n    },\r\n    doAepInitialize: () => ({ dispatch, store, anonGet }) => {\r\n      dispatch({\r\n        type: AEP_INITALIZE_START,\r\n        payload: {\r\n          _shouldInitialize: false,\r\n        }\r\n      })\r\n      initMap(store);      \r\n    },\r\n    reactAepShouldInitialize: (state) => {\r\n      if(state.aep._shouldInitialize) return { actionCreator: \"doAepInitialize\" };\r\n    }\r\n  })\r\n}\r\n\r\nexport {getBundle as default}\r\n\r\n\r\nconst initMap=function(store){\r\n /* const map = store.selectMap();\r\n      const root = store.selectTreeRootNode();\r\n      let vectorSource=new VectorSource({\r\n        format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n        loader:function(extent, resolution, projection) {\r\n          var url = `${apiHost}/models/boundaries`;\r\n          var xhr = new XMLHttpRequest();\r\n          xhr.open('GET', url);\r\n          xhr.setRequestHeader(\"Authorization\", `Bearer ${token}`)\r\n          //var onError = function() {\r\n          //  vectorSource.removeLoadedExtent(extent);\r\n          //}\r\n          //xhr.onerror = onError;\r\n          xhr.onload = function() {\r\n            if (xhr.status == 200) {\r\n              let format=vectorSource.getFormat();\r\n              let features = format.readFeatures(xhr.responseText)\r\n              vectorSource.addFeatures(features);\r\n            } else {\r\n              //onError();\r\n              console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n            }\r\n          }\r\n          xhr.send();\r\n        }\r\n      });\r\n\r\n      var vectorLayer1 = new VectorLayer({\r\n          source:vectorSource,\r\n          style:function(feature){\r\n            let s = new Style({\r\n              stroke: new Stroke({\r\n                color: '#CCC',\r\n                width: 3.0\r\n              }),\r\n              fill:new Fill({\r\n                color: 'rgba(0,0,255,0.0)'\r\n              }),\r\n              text: new Text({\r\n                font: '11px \"Open Sans\", \"Arial Unicode MS\", \"sans-serif\"',\r\n                //placement: 'line',\r\n                overflow:false,\r\n                stroke: new Stroke({color:\"#FFF\", width:2}),\r\n                fill: new Fill({\r\n                  color: 'black'\r\n                })\r\n              })\r\n            })\r\n            s.getText().setText(feature.get('modelName'));\r\n            return s;\r\n          } \r\n      });\r\n*/\r\nlet lyr = null;\r\n  const parentUid = store.selectTreeViewRootId();\r\n  const uid = v4();\r\n  store.doAddLayer({\r\n    uid: uid,\r\n    displayName: 'AEP Grids',\r\n    parentUid: parentUid,\r\n    mapLayer: lyr,\r\n    serviceType: \"LocalGeoTif\",\r\n    visible: true,\r\n    zoomTo: false,\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}