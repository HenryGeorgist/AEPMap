{"ast":null,"code":"import Style from \"ol/style/Style\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\nimport Circle from \"ol/style/Circle\";\nimport Txt from \"ol/style/Text\";\nwindow.olStyle = {\n  Style: Style,\n  Fill: Fill,\n  Stroke: Stroke,\n  Circle: Circle,\n  Text: Txt\n};\nconst defaultVectorStyle = [new Style({\n  stroke: new Stroke({\n    color: \"rgba(255, 255, 255, 0.9)\",\n    width: 4\n  }),\n  fill: new Fill({\n    color: \"rgba(255, 255, 255, 0.2)\"\n  })\n}), new Style({\n  stroke: new Stroke({\n    color: \"rgba(0, 0, 0, 0.8)\",\n    lineDash: [4, 4],\n    width: 2\n  })\n}), new Style({\n  image: new Circle({\n    radius: 8,\n    stroke: new Stroke({\n      color: \"rgba(0, 0, 0, 0.8)\",\n      width: 2\n    }),\n    fill: new Fill({\n      color: \"rgba(255, 255, 255, 1)\"\n    })\n  })\n})];\nexport default (options => {\n  if (options.styleFn) {\n    return eval(options.styleFn);\n  }\n\n  if (options.style) {\n    return options.style;\n  }\n\n  if (options.styleAttributes) {\n    return (feature, resolution) => {\n      const fillColor = feature.get(\"fillColor\");\n      const strokeColor = feature.get(\"strokeColor\");\n      const strokeWidth = feature.get(\"strokeWidth\");\n      const strokeDash = feature.get(\"strokeDash\");\n      const markerRadius = feature.get(\"markerRadius\");\n      const markerColor = feature.get(\"markerColor\");\n      const markerStrokeColor = feature.get(\"markerStrokeColor\");\n      const markerStrokeWidth = feature.get(\"markerStrokeWidth\");\n      const markerFillColor = feature.get(\"markerFillColor\");\n      const style = new Style();\n\n      if (fillColor) {\n        style.setFill(new Fill({\n          color: fillColor\n        }));\n      }\n\n      if (strokeColor || strokeWidth || strokeDash) {\n        style.setStroke(new Stroke({\n          color: strokeColor || \"rgba(0, 0, 0, 0.5)\",\n          lineDash: strokeDash ? strokeDash.split(\",\") : [10, 10],\n          width: strokeWidth || 2\n        }));\n      }\n\n      if (markerColor || markerRadius || markerStrokeColor || markerStrokeWidth || markerFillColor) {\n        style.setImage(new Circle({\n          radius: markerRadius || 3,\n          stroke: new Stroke({\n            color: markerStrokeColor || \"rgba(0, 0, 0, 0.7)\",\n            width: markerStrokeWidth || 0\n          }),\n          fill: new Fill({\n            color: markerFillColor || \"rgba(255, 255, 255, 0.2)\"\n          })\n        }));\n      }\n\n      return style;\n    };\n  }\n\n  return defaultVectorStyle;\n}); // (\n//   function(f){\n//     const b = feature.get('briefit');\n//     const h = b === 'Y';\n//     const style = new Style({\n//       image: new Circle({\n//         radius: h ? 7 : 5,\n//         stroke: new Stroke({\n//           color: '#FFFFFF',\n//           width: 2\n//         }),\n//         fill: new Fill({\n//           color: h ? '#DEA500' : '#B85B2B'\n//         })\n//       })\n//     });\n//     return style;\n//   }\n// )","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/@corpsmap/corpsmap/src/openlayers-utils/vector-style.js"],"names":["Style","Fill","Stroke","Circle","Txt","window","olStyle","Text","defaultVectorStyle","stroke","color","width","fill","lineDash","image","radius","options","styleFn","eval","style","styleAttributes","feature","resolution","fillColor","get","strokeColor","strokeWidth","strokeDash","markerRadius","markerColor","markerStrokeColor","markerStrokeWidth","markerFillColor","setFill","setStroke","split","setImage"],"mappings":"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","sourcesContent":["import Style from \"ol/style/Style\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\nimport Circle from \"ol/style/Circle\";\nimport Txt from \"ol/style/Text\";\n\nwindow.olStyle = {\n  Style: Style,\n  Fill: Fill,\n  Stroke: Stroke,\n  Circle: Circle,\n  Text: Txt\n};\n\nconst defaultVectorStyle = [\n  new Style({\n    stroke: new Stroke({\n      color: \"rgba(255, 255, 255, 0.9)\",\n      width: 4\n    }),\n    fill: new Fill({\n      color: \"rgba(255, 255, 255, 0.2)\"\n    })\n  }),\n  new Style({\n    stroke: new Stroke({\n      color: \"rgba(0, 0, 0, 0.8)\",\n      lineDash: [4, 4],\n      width: 2\n    })\n  }),\n  new Style({\n    image: new Circle({\n      radius: 8,\n      stroke: new Stroke({\n        color: \"rgba(0, 0, 0, 0.8)\",\n        width: 2\n      }),\n      fill: new Fill({\n        color: \"rgba(255, 255, 255, 1)\"\n      })\n    })\n  })\n];\n\nexport default options => {\n  if (options.styleFn) {\n    return eval(options.styleFn);\n  }\n\n  if (options.style) {\n    return options.style;\n  }\n\n  if (options.styleAttributes) {\n    return (feature, resolution) => {\n      const fillColor = feature.get(\"fillColor\");\n      const strokeColor = feature.get(\"strokeColor\");\n      const strokeWidth = feature.get(\"strokeWidth\");\n      const strokeDash = feature.get(\"strokeDash\");\n      const markerRadius = feature.get(\"markerRadius\");\n      const markerColor = feature.get(\"markerColor\");\n      const markerStrokeColor = feature.get(\"markerStrokeColor\");\n      const markerStrokeWidth = feature.get(\"markerStrokeWidth\");\n      const markerFillColor = feature.get(\"markerFillColor\");\n\n      const style = new Style();\n      if (fillColor) {\n        style.setFill(\n          new Fill({\n            color: fillColor\n          })\n        );\n      }\n      if (strokeColor || strokeWidth || strokeDash) {\n        style.setStroke(\n          new Stroke({\n            color: strokeColor || \"rgba(0, 0, 0, 0.5)\",\n            lineDash: strokeDash ? strokeDash.split(\",\") : [10, 10],\n            width: strokeWidth || 2\n          })\n        );\n      }\n      if (\n        markerColor ||\n        markerRadius ||\n        markerStrokeColor ||\n        markerStrokeWidth ||\n        markerFillColor\n      ) {\n        style.setImage(\n          new Circle({\n            radius: markerRadius || 3,\n            stroke: new Stroke({\n              color: markerStrokeColor || \"rgba(0, 0, 0, 0.7)\",\n              width: markerStrokeWidth || 0\n            }),\n            fill: new Fill({\n              color: markerFillColor || \"rgba(255, 255, 255, 0.2)\"\n            })\n          })\n        );\n      }\n      return style;\n    };\n  }\n\n  return defaultVectorStyle;\n};\n\n// (\n//   function(f){\n//     const b = feature.get('briefit');\n//     const h = b === 'Y';\n//     const style = new Style({\n//       image: new Circle({\n//         radius: h ? 7 : 5,\n//         stroke: new Stroke({\n//           color: '#FFFFFF',\n//           width: 2\n//         }),\n//         fill: new Fill({\n//           color: h ? '#DEA500' : '#B85B2B'\n//         })\n//       })\n//     });\n//     return style;\n//   }\n// )\n"]},"metadata":{},"sourceType":"module"}