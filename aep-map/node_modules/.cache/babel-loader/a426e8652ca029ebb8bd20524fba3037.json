{"ast":null,"code":"import 'ol/ol.css';\nimport { getLayer } from '@corpsmap/corpsmap/src/openlayers-utils/layer-utilities';\nimport exampleTiff from '../resources/Depth (Max).Terrain.stpaul_10ft.tif';\nexport default {\n  name: 'drawAEPGrid',\n  getReducer: () => {\n    const initialData = {\n      shouldInitalize: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n        case \"CM2_INITIALIZE_FINISHED\":\n        case \"TREEVIEW_LOADED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawAEPGridInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap(); //replace this with a service from the PFRA AEP grid data - then we can have a view of the AEP grids.\n    //    const lyr = new ImageLayer({\n    //    source: new Static({\n    //        url: 'C:\\Users\\Q0HECWPL\\aepmap\\aep-map\\src\\resources\\Depth (Max).Terrain.stpaul_10ft.tif',\n    //        projection: projection,\n    //       imageExtent: extent,\n    //      }),\n    //    }) \n\n    const lyr = getLayer({\n      serviceType: 'WMS',\n      url: exampleTiff\n    });\n    map.addLayer(lyr);\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED'\n    });\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.drawAEPGrid.shouldInitalize) return {\n      actionCreator: 'doDrawAEPGridInitializeLayer'\n    };\n  }\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/src/app-bundles/draw-bundle.js"],"names":["getLayer","exampleTiff","name","getReducer","initialData","shouldInitalize","state","type","payload","Object","assign","doDrawAEPGridInitializeLayer","dispatch","store","map","selectMap","lyr","serviceType","url","addLayer","reactDrawShouldInitialize","drawAEPGrid","actionCreator"],"mappings":"AACA,OAAO,WAAP;AACA,SAAQA,QAAR,QAAuB,yDAAvB;AACA,OAAOC,WAAP,MAAwB,kDAAxB;AAEA,eAAe;AACXC,EAAAA,IAAI,EAAE,aADK;AAEXC,EAAAA,UAAU,EAAC,MAAK;AACZ,UAAMC,WAAW,GAAG;AAChBC,MAAAA,eAAe,EAAE;AADD,KAApB;AAGA,WAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAACG,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAtB,KAA0C;AAC7C,cAAOD,IAAP;AACI,aAAK,yBAAL;AACA,aAAK,0BAAL;AACI,iBAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACJ,aAAK,iBAAL;AACA,aAAK,yBAAL;AACA,aAAK,iBAAL;AACI,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BD,YAAAA,eAAe,EAAE;AADW,WAAzB,CAAP;;AAGJ;AACI,iBAAOC,KAAP;AAXR;AAaH,KAdD;AAeH,GArBU;AAsBXK,EAAAA,4BAA4B,EAAE,MAAM,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,KAAuB;AACvDD,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,yBAAP;AAAkCC,MAAAA,OAAO,EAAE;AAACH,QAAAA,eAAe,EAAE;AAAlB;AAA3C,KAAD,CAAR;AACA,UAAMS,GAAG,GAAGD,KAAK,CAACE,SAAN,EAAZ,CAFuD,CAGvD;AAER;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,UAAMC,GAAG,GAAGhB,QAAQ,CAAC;AACjBiB,MAAAA,WAAW,EAAE,KADI;AAEjBC,MAAAA,GAAG,EAAEjB;AAFY,KAAD,CAApB;AAIAa,IAAAA,GAAG,CAACK,QAAJ,CAAaH,GAAb;AACAJ,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GA1CU;AA2CXa,EAAAA,yBAAyB,EAAGd,KAAD,IAAW;AAClC,QAAGA,KAAK,CAACe,WAAN,CAAkBhB,eAArB,EAAsC,OAAO;AAAEiB,MAAAA,aAAa,EAAE;AAAjB,KAAP;AACzC;AA7CU,CAAf","sourcesContent":["\r\nimport 'ol/ol.css';\r\nimport {getLayer} from '@corpsmap/corpsmap/src/openlayers-utils/layer-utilities'\r\nimport exampleTiff from '../resources/Depth (Max).Terrain.stpaul_10ft.tif'\r\n\r\nexport default {\r\n    name: 'drawAEPGrid',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            shouldInitalize: false,\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case 'DRAW_INITIALIZE_FINISHED':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                case \"CM2_INITIALIZE_FINISHED\":\r\n                case \"TREEVIEW_LOADED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawAEPGridInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        //replace this with a service from the PFRA AEP grid data - then we can have a view of the AEP grids.\r\n\r\n//    const lyr = new ImageLayer({\r\n//    source: new Static({\r\n//        url: 'C:\\Users\\Q0HECWPL\\aepmap\\aep-map\\src\\resources\\Depth (Max).Terrain.stpaul_10ft.tif',\r\n//        projection: projection,\r\n//       imageExtent: extent,\r\n//      }),\r\n//    }) \r\n        const lyr = getLayer({\r\n            serviceType: 'WMS',\r\n            url: exampleTiff\r\n        })\r\n        map.addLayer(lyr)\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED'\r\n        })\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.drawAEPGrid.shouldInitalize) return { actionCreator: 'doDrawAEPGridInitializeLayer'}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}