{"ast":null,"code":"import Style from 'ol/style/Style';\nimport Stroke from 'ol/style/Stroke';\nimport Fill from 'ol/style/Fill';\nimport Text from 'ol/style/Text';\nimport Static from 'ol/source/ImageStatic';\nimport ImageLayer from 'ol/layer/Image';\nimport Projection from 'ol/proj/Projection';\nimport exampleTiff from '../../../resources/Depth (Max).Terrain.stpaul_10ft.tif';\nconst AEP_INITALIZE_START = 'AEP_INITALIZE_START';\nconst AEP_INITALIZE_END = 'AEP_INITALIZE_END';\nconst MAP_INITIALIZED = 'MAP_INITIALIZED';\nconst apiHost = process.env.REACT_APP_APIHOST;\n\nconst getBundle = function () {\n  return {\n    name: 'aep',\n    getReducer: () => {\n      const initialData = {\n        _shouldInitialize: false\n      };\n      return (state = initialData, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case AEP_INITALIZE_START:\n          case AEP_INITALIZE_END:\n            return Object.assign({}, state, payload);\n\n          case MAP_INITIALIZED:\n            return Object.assign({}, state, {\n              _shouldInitialize: true\n            });\n\n          default:\n            return state;\n        }\n      };\n    },\n    doAepInitialize: () => ({\n      dispatch,\n      store,\n      anonGet\n    }) => {\n      dispatch({\n        type: AEP_INITALIZE_START,\n        payload: {\n          _shouldInitialize: false\n        }\n      });\n      initMap(store);\n    },\n    reactAepShouldInitialize: state => {\n      if (state.aep._shouldInitialize) return {\n        actionCreator: \"doAepInitialize\"\n      };\n    }\n  };\n};\n\nexport { getBundle as default };\n\nconst initMap = function (store) {\n  const map = store.selectMap();\n  console.log(map);\n  var extent = [745484.7500000000000000, 8008067.9699999997392297, 763614.7500000000000000, 8018797.9699999997392297];\n  var projection = new Projection({\n    code: '4269',\n    units: 'ft',\n    extent: extent\n  });\n  const lyr = new ImageLayer({\n    source: new Static({\n      url: exampleTiff,\n      projection: projection,\n      imageExtent: extent\n    })\n  });\n  map.addLayer(lyr);\n  /*\r\n      const root = store.selectTreeRootNode();\r\n  \r\n      let vectorSource=new VectorSource({\r\n        format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n        loader:function(extent, resolution, projection) {\r\n          //let token=\"\";\r\n          //const pp=store.selectParentProps();\r\n          //if(store.selectParentProps()){\r\n          //  token=store.selectParentProps().authToken;\r\n          //}\r\n          var url = `${apiHost}/models/boundaries`;\r\n          var xhr = new XMLHttpRequest();\r\n          xhr.open('GET', url);\r\n          xhr.setRequestHeader(\"Authorization\", `Bearer ${config.token}`)\r\n          //var onError = function() {\r\n          //  vectorSource.removeLoadedExtent(extent);\r\n          //}\r\n          //xhr.onerror = onError;\r\n          xhr.onload = function() {\r\n            if (xhr.status == 200) {\r\n              let format=vectorSource.getFormat();\r\n              let features = format.readFeatures(xhr.responseText)\r\n              vectorSource.addFeatures(features);\r\n            } else {\r\n              //onError();\r\n              console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n            }\r\n          }\r\n          xhr.send();\r\n        }\r\n      });\r\n        var vectorLayer1 = new VectorLayer({\r\n          source:vectorSource,\r\n          style:function(feature){\r\n            let s=styles('boundary')\r\n            s.getText().setText(feature.get('modelName'));\r\n            return s;\r\n          } \r\n      });\r\n   \r\n      store.doAddLayer({\r\n          mapLayer:vectorLayer1,\r\n          displayName:\"Model Boundaries\",\r\n          type:\"notfolder\",\r\n          parentUid:root.uid,\r\n          visible:true,\r\n      })\r\n        var featureOverlay = new VectorLayer({\r\n        source: new VectorSource(),\r\n        map: map,\r\n        style: function(feature) {\r\n          let highlightStyle=styles('highlight')\r\n          //highlightStyle.getText().setText(feature.get('name'));\r\n          return highlightStyle;\r\n        }\r\n      });\r\n        let highlight=null;\r\n      vectorLayer1.getSource().on('change', function(event) {\r\n        if(vectorLayer1.getSource().getState()==='ready'){\r\n            map.on('click',function(evt) {\r\n            console.log(evt.pixel)\r\n          })\r\n            map.on('pointermove', function(evt) {\r\n            if (evt.dragging) {\r\n              return;\r\n            }\r\n            console.log(evt)\r\n          })\r\n        }\r\n      });\r\n      */\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/src/containers/map/plugin/cm3-aep-bundle.js"],"names":["Style","Stroke","Fill","Text","Static","ImageLayer","Projection","exampleTiff","AEP_INITALIZE_START","AEP_INITALIZE_END","MAP_INITIALIZED","apiHost","process","env","REACT_APP_APIHOST","getBundle","name","getReducer","initialData","_shouldInitialize","state","type","payload","Object","assign","doAepInitialize","dispatch","store","anonGet","initMap","reactAepShouldInitialize","aep","actionCreator","default","map","selectMap","console","log","extent","projection","code","units","lyr","source","url","imageExtent","addLayer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,WAAP,MAAwB,wDAAxB;AACA,MAAMC,mBAAmB,GAAC,qBAA1B;AACA,MAAMC,iBAAiB,GAAC,mBAAxB;AACA,MAAMC,eAAe,GAAC,iBAAtB;AAEA,MAAMC,OAAO,GAACC,OAAO,CAACC,GAAR,CAAYC,iBAA1B;;AAEA,MAAMC,SAAS,GAAC,YAAU;AACxB,SAAO;AACLC,IAAAA,IAAI,EAAC,KADA;AAELC,IAAAA,UAAU,EAAE,MAAM;AAChB,YAAMC,WAAW,GAAG;AAClBC,QAAAA,iBAAiB,EAAE;AADD,OAApB;AAGA,aAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAtB,KAA4C;AACjD,gBAAOD,IAAP;AACE,eAAKb,mBAAL;AACA,eAAKC,iBAAL;AACE,mBAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACF,eAAKZ,eAAL;AACE,mBAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BD,cAAAA,iBAAiB,EAAE;AADW,aAAzB,CAAP;;AAGF;AACE,mBAAOC,KAAP;AATJ;AAWD,OAZD;AAaD,KAnBI;AAoBLK,IAAAA,eAAe,EAAE,MAAM,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA;AAAnB,KAAD,KAAkC;AACvDF,MAAAA,QAAQ,CAAC;AACPL,QAAAA,IAAI,EAAEb,mBADC;AAEPc,QAAAA,OAAO,EAAE;AACPH,UAAAA,iBAAiB,EAAE;AADZ;AAFF,OAAD,CAAR;AAMAU,MAAAA,OAAO,CAACF,KAAD,CAAP;AACD,KA5BI;AA6BLG,IAAAA,wBAAwB,EAAGV,KAAD,IAAW;AACnC,UAAGA,KAAK,CAACW,GAAN,CAAUZ,iBAAb,EAAgC,OAAO;AAAEa,QAAAA,aAAa,EAAE;AAAjB,OAAP;AACjC;AA/BI,GAAP;AAiCD,CAlCD;;AAoCA,SAAQjB,SAAS,IAAIkB,OAArB;;AAGA,MAAMJ,OAAO,GAAC,UAASF,KAAT,EAAe;AAC3B,QAAMO,GAAG,GAAGP,KAAK,CAACQ,SAAN,EAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,MAAII,MAAM,GAAG,CAAC,uBAAD,EAAyB,wBAAzB,EAAmD,uBAAnD,EAA2E,wBAA3E,CAAb;AACA,MAAIC,UAAU,GAAG,IAAIjC,UAAJ,CAAe;AAC9BkC,IAAAA,IAAI,EAAE,MADwB;AAE9BC,IAAAA,KAAK,EAAE,IAFuB;AAG9BH,IAAAA,MAAM,EAAEA;AAHsB,GAAf,CAAjB;AAKA,QAAMI,GAAG,GAAG,IAAIrC,UAAJ,CAAe;AACzBsC,IAAAA,MAAM,EAAE,IAAIvC,MAAJ,CAAW;AACnBwC,MAAAA,GAAG,EAAErC,WADc;AAEnBgC,MAAAA,UAAU,EAAEA,UAFO;AAGnBM,MAAAA,WAAW,EAAEP;AAHM,KAAX;AADiB,GAAf,CAAZ;AAOAJ,EAAAA,GAAG,CAACY,QAAJ,CAAaJ,GAAb;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6ED,CA9FD","sourcesContent":["import Style from 'ol/style/Style';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Fill from 'ol/style/Fill';\r\nimport Text from 'ol/style/Text';\r\nimport Static from 'ol/source/ImageStatic';\r\nimport ImageLayer from 'ol/layer/Image';\r\nimport Projection from 'ol/proj/Projection';\r\nimport exampleTiff from '../../../resources/Depth (Max).Terrain.stpaul_10ft.tif'\r\nconst AEP_INITALIZE_START='AEP_INITALIZE_START';\r\nconst AEP_INITALIZE_END='AEP_INITALIZE_END';\r\nconst MAP_INITIALIZED='MAP_INITIALIZED';\r\n\r\nconst apiHost=process.env.REACT_APP_APIHOST\r\n\r\nconst getBundle=function(){\r\n  return({\r\n    name:'aep',\r\n    getReducer: () => {\r\n      const initialData = {\r\n        _shouldInitialize: false,\r\n      };\r\n      return (state = initialData, { type, payload }) => {\r\n        switch(type){\r\n          case AEP_INITALIZE_START:\r\n          case AEP_INITALIZE_END:\r\n            return Object.assign({}, state, payload);\r\n          case MAP_INITIALIZED:\r\n            return Object.assign({}, state, {\r\n              _shouldInitialize: true\r\n            })\r\n          default:\r\n            return state;\r\n        }\r\n      }\r\n    },\r\n    doAepInitialize: () => ({ dispatch, store, anonGet }) => {\r\n      dispatch({\r\n        type: AEP_INITALIZE_START,\r\n        payload: {\r\n          _shouldInitialize: false,\r\n        }\r\n      })\r\n      initMap(store);      \r\n    },\r\n    reactAepShouldInitialize: (state) => {\r\n      if(state.aep._shouldInitialize) return { actionCreator: \"doAepInitialize\" };\r\n    }\r\n  })\r\n}\r\n\r\nexport {getBundle as default}\r\n\r\n\r\nconst initMap=function(store){\r\n  const map = store.selectMap();\r\n  console.log(map)\r\n  var extent = [745484.7500000000000000,8008067.9699999997392297, 763614.7500000000000000,8018797.9699999997392297];\r\n  var projection = new Projection({\r\n    code: '4269',\r\n    units: 'ft',\r\n    extent: extent,\r\n  });\r\n  const lyr = new ImageLayer({\r\n    source: new Static({\r\n    url: exampleTiff,\r\n    projection: projection,\r\n    imageExtent: extent,\r\n    }),\r\n  }) \r\n  map.addLayer(lyr);\r\n  /*\r\n      const root = store.selectTreeRootNode();\r\n  \r\n      let vectorSource=new VectorSource({\r\n        format: new GeoJSON({featureProjection:\"EPSG:3857\"}),\r\n        loader:function(extent, resolution, projection) {\r\n          //let token=\"\";\r\n          //const pp=store.selectParentProps();\r\n          //if(store.selectParentProps()){\r\n          //  token=store.selectParentProps().authToken;\r\n          //}\r\n          var url = `${apiHost}/models/boundaries`;\r\n          var xhr = new XMLHttpRequest();\r\n          xhr.open('GET', url);\r\n          xhr.setRequestHeader(\"Authorization\", `Bearer ${config.token}`)\r\n          //var onError = function() {\r\n          //  vectorSource.removeLoadedExtent(extent);\r\n          //}\r\n          //xhr.onerror = onError;\r\n          xhr.onload = function() {\r\n            if (xhr.status == 200) {\r\n              let format=vectorSource.getFormat();\r\n              let features = format.readFeatures(xhr.responseText)\r\n              vectorSource.addFeatures(features);\r\n            } else {\r\n              //onError();\r\n              console.log(\"ERROR LOADING VECTOR SOURCE\")\r\n            }\r\n          }\r\n          xhr.send();\r\n        }\r\n      });\r\n\r\n      var vectorLayer1 = new VectorLayer({\r\n          source:vectorSource,\r\n          style:function(feature){\r\n            let s=styles('boundary')\r\n            s.getText().setText(feature.get('modelName'));\r\n            return s;\r\n          } \r\n      });\r\n   \r\n      store.doAddLayer({\r\n          mapLayer:vectorLayer1,\r\n          displayName:\"Model Boundaries\",\r\n          type:\"notfolder\",\r\n          parentUid:root.uid,\r\n          visible:true,\r\n      })\r\n\r\n      var featureOverlay = new VectorLayer({\r\n        source: new VectorSource(),\r\n        map: map,\r\n        style: function(feature) {\r\n          let highlightStyle=styles('highlight')\r\n          //highlightStyle.getText().setText(feature.get('name'));\r\n          return highlightStyle;\r\n        }\r\n      });\r\n\r\n      let highlight=null;\r\n      vectorLayer1.getSource().on('change', function(event) {\r\n        if(vectorLayer1.getSource().getState()==='ready'){\r\n\r\n          map.on('click',function(evt) {\r\n            console.log(evt.pixel)\r\n          })\r\n\r\n          map.on('pointermove', function(evt) {\r\n            if (evt.dragging) {\r\n              return;\r\n            }\r\n            console.log(evt)\r\n          })\r\n        }\r\n      });\r\n      */\r\n}"]},"metadata":{},"sourceType":"module"}