{"ast":null,"code":"import Style from 'ol/style/Style';\nimport Stroke from 'ol/style/Stroke';\nimport Fill from 'ol/style/Fill';\nimport Circle from 'ol/style/Circle';\nimport Icon from 'ol/style/Icon';\nimport Text from 'ol/style/Text';\nimport { toRadians } from 'ol/math'; // import { formatAttributes, formatObject } from '../helpers';\n// import { defaultFeatureStyle, defaultLabelStyle } from './defaultStyle';\n\n/**\r\n * Creates a new style.\r\n *\r\n * @param {import('./types').StyleType} [styleData]\r\n * @return {Style}\r\n */\n\nexport const createFeatureStyle = styleData => {\n  if (!styleData.icon) {\n    styleData.icon = null;\n  }\n\n  if (!styleData.font) {\n    styleData.font = null;\n  }\n\n  if (!styleData.fill) {\n    styleData.fill = null;\n  }\n\n  if (!styleData.stroke) {\n    styleData.stroke = null;\n  }\n\n  if (!styleData.circle) {\n    styleData.circle = null;\n  }\n\n  const fill = styleData.fill ? new Fill(styleData.fill) : null,\n        stroke = styleData.stroke ? new Stroke(styleData.stroke) : null,\n        fontSymbol = styleData.font ? createLabelStyle(styleData.font) : null;\n  let image = null;\n\n  if (styleData.icon) {\n    image = new Icon(Object.assign({}, styleData.icon, {\n      rotation: toRadians(styleData.icon.rotation || 0)\n    }));\n  }\n\n  if (styleData.circle) {\n    const circleFill = styleData.circle.fill ? new Fill(styleData.circle.fill) : null;\n    const circleStroke = styleData.circle.stroke ? new Stroke(styleData.circle.stroke) : null;\n    image = new Circle({\n      radius: styleData.circle.radius,\n      fill: circleFill,\n      stroke: circleStroke\n    });\n  }\n\n  return new Style({\n    stroke,\n    fill,\n    image,\n    text: fontSymbol\n  });\n};\n/**\r\n * Creates a text style. `text` property is not formatted, which means that it can contain $id, {ATTRIBUTE_NAME}...\r\n * Before the feature is drawn on the map you can call `getFormattedLabel` to create the actual text displayed on the map.\r\n *\r\n * @param {import('./types').LabelType} labelData\r\n * @return {Text}\r\n */\n\nexport const createLabelStyle = labelData => {\n  const rotation = toRadians(labelData.rotation || 0);\n  const fill = labelData.fill ? new Fill(labelData.fill) : null;\n  const stroke = labelData.stroke ? new Stroke(labelData.stroke) : null;\n  const backgroundFill = labelData.backgroundFill ? new Fill(labelData.backgroundFill) : null;\n  const backgroundStroke = labelData.backgroundStroke ? new Stroke(labelData.backgroundStroke) : null; // text will be a template - can include: $id, {ATTRIBUTE_NAME}...\n  // before the feature is drawn on the map it will be formatted based of feature attribute values\n\n  return new Text(Object.assign({}, labelData, {\n    rotation,\n    fill,\n    stroke,\n    backgroundFill,\n    backgroundStroke\n  }));\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/ol-esri-style/src/styles.js"],"names":["Style","Stroke","Fill","Circle","Icon","Text","toRadians","createFeatureStyle","styleData","icon","font","fill","stroke","circle","fontSymbol","createLabelStyle","image","Object","assign","rotation","circleFill","circleStroke","radius","text","labelData","backgroundFill","backgroundStroke"],"mappings":"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","sourcesContent":["import Style from 'ol/style/Style';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Fill from 'ol/style/Fill';\r\nimport Circle from 'ol/style/Circle';\r\nimport Icon from 'ol/style/Icon';\r\nimport Text from 'ol/style/Text';\r\nimport { toRadians } from 'ol/math';\r\n// import { formatAttributes, formatObject } from '../helpers';\r\n// import { defaultFeatureStyle, defaultLabelStyle } from './defaultStyle';\r\n\r\n/**\r\n * Creates a new style.\r\n *\r\n * @param {import('./types').StyleType} [styleData]\r\n * @return {Style}\r\n */\r\nexport const createFeatureStyle = styleData => {\r\n  if (!styleData.icon) {\r\n    styleData.icon = null;\r\n  }\r\n  if (!styleData.font) {\r\n    styleData.font = null;\r\n  }\r\n  if (!styleData.fill) {\r\n    styleData.fill = null;\r\n  }\r\n  if (!styleData.stroke) {\r\n    styleData.stroke = null;\r\n  }\r\n  if (!styleData.circle) {\r\n    styleData.circle = null;\r\n  }\r\n\r\n  const fill = styleData.fill ? new Fill(styleData.fill) : null,\r\n    stroke = styleData.stroke ? new Stroke(styleData.stroke) : null,\r\n    fontSymbol = styleData.font ? createLabelStyle(styleData.font) : null;\r\n  let image = null;\r\n\r\n  if (styleData.icon) {\r\n    image = new Icon(Object.assign({}, styleData.icon, { rotation: toRadians(styleData.icon.rotation || 0) }));\r\n  }\r\n  if (styleData.circle) {\r\n    const circleFill = styleData.circle.fill ? new Fill(styleData.circle.fill) : null;\r\n    const circleStroke = styleData.circle.stroke ? new Stroke(styleData.circle.stroke) : null;\r\n    image = new Circle({ radius: styleData.circle.radius, fill: circleFill, stroke: circleStroke });\r\n  }\r\n\r\n  return new Style({ stroke, fill, image, text: fontSymbol });\r\n};\r\n\r\n/**\r\n * Creates a text style. `text` property is not formatted, which means that it can contain $id, {ATTRIBUTE_NAME}...\r\n * Before the feature is drawn on the map you can call `getFormattedLabel` to create the actual text displayed on the map.\r\n *\r\n * @param {import('./types').LabelType} labelData\r\n * @return {Text}\r\n */\r\nexport const createLabelStyle = labelData => {\r\n  const rotation = toRadians(labelData.rotation || 0);\r\n  const fill = labelData.fill ? new Fill(labelData.fill) : null;\r\n  const stroke = labelData.stroke ? new Stroke(labelData.stroke) : null;\r\n  const backgroundFill = labelData.backgroundFill ? new Fill(labelData.backgroundFill) : null;\r\n  const backgroundStroke = labelData.backgroundStroke ? new Stroke(labelData.backgroundStroke) : null;\r\n\r\n  // text will be a template - can include: $id, {ATTRIBUTE_NAME}...\r\n  // before the feature is drawn on the map it will be formatted based of feature attribute values\r\n  return new Text(Object.assign({}, labelData, { rotation, fill, stroke, backgroundFill, backgroundStroke }));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}