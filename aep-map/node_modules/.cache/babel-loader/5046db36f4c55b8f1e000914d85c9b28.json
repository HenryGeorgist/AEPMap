{"ast":null,"code":"/**\r\n * Formats the label of a feature. The label can contain $id, {ATTRIBUTE_NAME}...\r\n * @param {!import('ol/Feature').default} feature\r\n * @param {!String} mask\r\n * @return {String}\r\n */\nexport const getFormattedLabel = (feature, mask) => {\n  if (mask.includes('$id')) mask = mask.replace('$id', feature.getId().toString());\n\n  if (mask.includes('{')) {\n    return formatObject(mask, feature.getProperties());\n  } else {\n    return mask;\n  }\n};\n/**\r\n * Format a template string based on provided object with values (placeholders).\r\n * @param {!String} mask\r\n * @param {!Object.<String,*>} object - object, containing the field names and their values\r\n * @param {Boolean} [removeLeftovers=true] - remove unplaced fields from returned result\r\n * @example\r\n * // Following example will write to the console: 'Foo: bar ()', any non existing properties\r\n * // will be removed as we pass true as last parameter\r\n *\r\n * const template = '{name}: {value} ({nonExistingProperty})'\r\n * const obj = {name: 'Foo', value: 'bar'}\r\n *\r\n * formatObject(obj))\r\n * // 'Foo: bar ()'\r\n * formatObject(obj, false))\r\n * // 'Foo: bar ({nonExistingProperty})'\r\n * @return {String}\r\n */\n\nexport const formatObject = function (mask, object, removeLeftovers = true) {\n  let result = mask;\n\n  for (let name in object) {\n    const regEx = new RegExp('\\\\{' + name + '\\\\}', 'gm');\n    result = result.replace(regEx, object[name]);\n  }\n\n  if (removeLeftovers) {\n    const regex = new RegExp('{([a-zA-Z]*?)}');\n    let match = null; //remove any '{someText}' strings left within the returned string\n\n    while ((match = regex.exec(result)) !== null) {\n      result = result.replace(regex, '');\n    }\n  }\n\n  return result;\n};","map":{"version":3,"sources":["C:/Examples/aepmap/aep-map/node_modules/ol-esri-style/src/formatters.js"],"names":["getFormattedLabel","feature","mask","includes","replace","getId","toString","formatObject","getProperties","object","removeLeftovers","result","name","regEx","RegExp","regex","match","exec"],"mappings":"AAAA;;;;;;AAMA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAClD,MAAIA,IAAI,CAACC,QAAL,CAAc,KAAd,CAAJ,EAA0BD,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoBH,OAAO,CAACI,KAAR,GAAgBC,QAAhB,EAApB,CAAP;;AAE1B,MAAIJ,IAAI,CAACC,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACtB,WAAOI,YAAY,CAACL,IAAD,EAAOD,OAAO,CAACO,aAAR,EAAP,CAAnB;AACD,GAFD,MAEO;AACL,WAAON,IAAP;AACD;AACF,CARM;AAUP;;;;;;;;;;;;;;;;;;;AAkBA,OAAO,MAAMK,YAAY,GAAG,UAASL,IAAT,EAAeO,MAAf,EAAuBC,eAAe,GAAG,IAAzC,EAA+C;AACzE,MAAIC,MAAM,GAAGT,IAAb;;AACA,OAAK,IAAIU,IAAT,IAAiBH,MAAjB,EAAyB;AACvB,UAAMI,KAAK,GAAG,IAAIC,MAAJ,CAAW,QAAQF,IAAR,GAAe,KAA1B,EAAiC,IAAjC,CAAd;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACP,OAAP,CAAeS,KAAf,EAAsBJ,MAAM,CAACG,IAAD,CAA5B,CAAT;AACD;;AAED,MAAIF,eAAJ,EAAqB;AACnB,UAAMK,KAAK,GAAG,IAAID,MAAJ,CAAW,gBAAX,CAAd;AACA,QAAIE,KAAK,GAAG,IAAZ,CAFmB,CAGnB;;AACA,WAAO,CAACA,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWN,MAAX,CAAT,MAAiC,IAAxC,EAA8C;AAC5CA,MAAAA,MAAM,GAAGA,MAAM,CAACP,OAAP,CAAeW,KAAf,EAAsB,EAAtB,CAAT;AACD;AACF;;AAED,SAAOJ,MAAP;AACD,CAjBM","sourcesContent":["/**\r\n * Formats the label of a feature. The label can contain $id, {ATTRIBUTE_NAME}...\r\n * @param {!import('ol/Feature').default} feature\r\n * @param {!String} mask\r\n * @return {String}\r\n */\r\nexport const getFormattedLabel = (feature, mask) => {\r\n  if (mask.includes('$id')) mask = mask.replace('$id', feature.getId().toString());\r\n\r\n  if (mask.includes('{')) {\r\n    return formatObject(mask, feature.getProperties());\r\n  } else {\r\n    return mask;\r\n  }\r\n};\r\n\r\n/**\r\n * Format a template string based on provided object with values (placeholders).\r\n * @param {!String} mask\r\n * @param {!Object.<String,*>} object - object, containing the field names and their values\r\n * @param {Boolean} [removeLeftovers=true] - remove unplaced fields from returned result\r\n * @example\r\n * // Following example will write to the console: 'Foo: bar ()', any non existing properties\r\n * // will be removed as we pass true as last parameter\r\n *\r\n * const template = '{name}: {value} ({nonExistingProperty})'\r\n * const obj = {name: 'Foo', value: 'bar'}\r\n *\r\n * formatObject(obj))\r\n * // 'Foo: bar ()'\r\n * formatObject(obj, false))\r\n * // 'Foo: bar ({nonExistingProperty})'\r\n * @return {String}\r\n */\r\nexport const formatObject = function(mask, object, removeLeftovers = true) {\r\n  let result = mask;\r\n  for (let name in object) {\r\n    const regEx = new RegExp('\\\\{' + name + '\\\\}', 'gm');\r\n    result = result.replace(regEx, object[name]);\r\n  }\r\n\r\n  if (removeLeftovers) {\r\n    const regex = new RegExp('{([a-zA-Z]*?)}');\r\n    let match = null;\r\n    //remove any '{someText}' strings left within the returned string\r\n    while ((match = regex.exec(result)) !== null) {\r\n      result = result.replace(regex, '');\r\n    }\r\n  }\r\n\r\n  return result;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}